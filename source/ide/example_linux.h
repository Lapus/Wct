/*

Пример исполняемого файла
для ОС Linux (x86) на Wct

Часть 1 -
Заголовок

*/

		// Заголовок исполняемого файла
Ho "ELF"	// Подпись .ELF, где "Ho" - специальный символ, а
		// "ELF" - ASCII символы
		
Ab		// или 01, где 1 - 32-х битная архитектура,
		// а 2 - 64-х битная, думаю, что это уж точно понятно

	Ab		// 1 = Little Endian, 2 = Big Endian
			// Это порядок байтов. В нашем случае -
			// Little Endian, или же, порядок от младшего
			// к старшему, тобишь - Ao - An...

	Ab		// Версия ELF-структуры файла

Ad		// Это у нас "OS ABI" - двоичный интерфейс приложений,
		// набор соглашений между программами, библиотеками
		// и операционной системой, обеспечивающих взаимодействие
		// этих компонентов на низком уровне на данной платформе.
		// В данном случае - ABI для 32-х битного линукса.

Aa aa aa aa	// Не используется...
aa aa aa aa	// В любом случае, оно для чего-то нужно

Ac aa		// Тип исполняемого файла, где
		// B = изменяемый, C = исполняемый, D = общий, E = ядро

Ad aa		// Набор инструкций. Сейчас мы работаем с набором
		// инструкций процессора типа "x86", но если захотим
		// писать программу для другого проца, то и сет инструкций
		// там будет другой.

		// Набор инструкций для x86 - wctsite.tk/code
		// AD - x86, x86_64 - DP, ARM - CI, и т.д.

Ab aa aa aa	// Повтор версии ELF структуры...
He IA AE	// Точка входа в программу. Одна из важнейших
		// частей в программе.

Ai DE AA	// Расположение таблицы заголовков секций	>———————┐
		//							│
Aa aa aa aa aa	//							│
Aa aa aa aa aa	//						      	│
		//						      	│
De aa		// Размер заголовка					│
Ca aa		// Размер таблицы заголовков программы			│
Ac aa		// Кол-во записей в таблице заголовка программы		│
Ci aa		// Размер записи в таблице заголовков			│
Aa aa		// Кол-во записей в таблице раздела заголовков		│
Aa aa		// Список в разделе таблицы заголовков с именами	│
		//							│
/*		//							│
		//							│
Часть 2 -								│
Заголовок программы							│
									│
*/		//							│
		//							│
Ab aa aa aa 	// Тип сегмента, у нас - B, значит		<———————┘
		// байты p_memsz по адресу p_vaddr будут
		// очищены, после чего будет произведено
		// копирование байтов p_filesz со смещением		>———————————————┐
		// p_offset в p_vaddr...						│
		//									│
He aa aa aa	// Смещение в файле, по которому могжет быть	>———————┐		│
		// найдена информация для данного сегмента (p_offset)	│		│
		//							│		│
He ia ae ai		// Место, где этот сегмент должен	>———————┼———————┐	│
			// размещаться в виртуальной памяти (p_vaddr)	│	│	│
		//							│	│	│
He ia ae ai	// UNDEFINED for ths System V ABI			│	│	│
Bo aa aa aa	// Размер сегмента в файле (p_filesz)		<———————┼———————┼———————┘
Bo aa aa aa	// Размер сегмента в памяти (p_memsz)			│	│
		//							│	│
Af aa aa aa aa	// Флаги,	 					│	│
Ba aa aa	// Необходимое выравнивание для данного раздела		│	│
			//						│	│
			// Необходимая системе информация		│	│
ABAAAAAAJDAAAAAA	// Просто без этого не работает..		│	│
JDJAAEAIJDJAAEAI	// На самом деле, тут содержатся		│	│
ANAAAAAAANAAAAAA	// p_* директивы.				│	│
AGAAAAAAAABAAAAA	//					<———————┴———————┘

/*

Часть 3 -
Код

*/

Li AE aa aa aa		// Помещаем число 4 (AE) в регистр EAX
Ll AB aa aa aa		// В регистр EBX помещаем число 1 (AB)

Lj JD ja ae ai		// В регистр ECX кладем адрес нашего сообщения	>———————┐
Lk AN aa aa aa		// В регистр EDX - размер сообщения 13 (N)		│
			//							│
Mn IA			// Выполняем прерывание IA.. Зачем?			│
			// Чтобы выполнить определенную функцию.		│
			// У нас в EAX - 4, значит мы будем выполнять		│
			// действие "вывод строки на экран", где -		│
			// EAX - номер функции. После выполнения прерывания	│
			// "IA" будет выведена строка "Wct One Love"		│
			//							│
Li AB aa aa aa		// И опять в EAX кладем единичку			│
			//							│
Db NL			// Обнуляем регистр EAX					│
Mn IA			// Знакомое нам прерывание IA..				│
			// Кстати, так звали ослика из мульта "Винни Пух"	│
			// Я думаю, что вы знаете, про что я говорю		│
/*			//							│
			// Наша программа содержит текст "Wct One Love",	│
Часть 4 -		// где "Ca" - пробел, а буквы, заключенные в кавычки -	│
Наш текст		// наш текст. После этого идет синхробайт "Ak", который	│
			// сообщает о том, что это конец программы...		│
*/			//......//			 			│
				//						│
"Wct" Ca "One" Ca "Love"	// "Wct One Love"		        <———————┘
Ak				// Конец...
